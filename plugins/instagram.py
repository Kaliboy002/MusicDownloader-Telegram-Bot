from utils import bs4, wget, asyncio, re, requests, logging; logging.basicConfig(level=logging.INFO); class Insta: @classmethod def initialize(cls): cls.headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:105.0) Gecko/20100101 Firefox/105.0", "Accept": "*/*", "Accept-Language": "en-US,en;q=0.5", "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8", "X-Requested-With": "XMLHttpRequest", "Origin": "https://saveig.app", "Connection": "keep-alive", "Referer": "https://saveig.app/en"}; @staticmethod def is_instagram_url(text) -> bool: return bool(re.search(r'(?:https?:\/\/)?(?:www\.)?(?:instagram\.com|instagr\.am)(?:\/(?:p|reel|tv|stories)\/(?:[^\s\/]+)|\/([\w-]+)(?:\/(?:[^\s\/]+))?)', text)); @staticmethod def extract_url(text) -> str | None: match = re.search(r'(https?:\/\/(?:www\.)?(?:ddinstagram\.com|instagram\.com|instagr\.am)\/(?:p|reel|tv|stories)\/[\w-]+\/?(?:\?[^\s]+)?(?:={1,2})?)', text); return match.group(0) if match else None; @staticmethod def determine_content_type(text) -> str: for pattern, content_type in {'/p/': 'post', '/reel/': 'reel', '/tv': 'igtv', '/stories/': 'story'}.items(): if pattern in text: return content_type; return 'unknown'; @staticmethod def is_publicly_available(url) -> bool: try: return requests.get(url, headers=Insta.headers).status_code == 200; except: return False; @staticmethod async def download_content(client, event, start_message, link) -> bool: content_type = Insta.determine_content_type(link); try: if content_type == 'reel': await Insta.download_reel(client, event, link); await start_message.delete(); return True; elif content_type == 'post': await Insta.download_post(client, event, link); await start_message.delete(); return True; elif content_type == 'story': await Insta.download_story(client, event, link); await start_message.delete(); return True; else: await event.reply("Invalid or unsupported content type. Please check the link."); await start_message.delete(); return True; except Exception as e: logging.error(f"Error downloading content: {e}"); await event.reply("Error processing your request."); await start_message.delete(); return False; @staticmethod async def download(client, event) -> bool: link = Insta.extract_url(event.message.text); start_message = await event.respond("Processing Your Instagram link..."); try: if "ddinstagram.com" in link: raise Exception; link = link.replace("instagram.com", "ddinstagram.com"); return await Insta.download_content(client, event, start_message, link); except Exception as e: logging.error(f"Fallback triggered: {e}"); await Insta.download_content(client, event, start_message, link); @staticmethod async def download_reel(client, event, link): try: meta_tag = await Insta.get_meta_tag(link); content_value = f"https://ddinstagram.com{meta_tag['content']}" if meta_tag else None; except: content_value = (await Insta.search_saveig(link) or [None])[0]; await Insta.send_file(client, event, content_value) if content_value else await event.reply("Error fetching reel."); @staticmethod async def download_post(client, event, link): meta_tags = await Insta.search_saveig(link); if meta_tags: for i, meta in enumerate(meta_tags): await asyncio.sleep(1); await Insta.send_file(client, event, meta, caption=f"Post part {i + 1}/{len(meta_tags)}"); else: await event.reply("Error fetching post."); @staticmethod async def download_story(client, event, link): meta_tags = await Insta.search_saveig(link); if meta_tags: await Insta.send_file(client, event, meta_tags[0]); else: await event.reply("Error fetching story."); @staticmethod async def get_meta_tag(link): try: soup = bs4.BeautifulSoup(requests.get(link).text, 'html.parser'); return soup.find('meta', attrs={'property': 'og:video'}); except Exception as e: logging.error(f"Meta tag error: {e}"); return None; @staticmethod async def search_saveig(link): try: response = requests.post("https://saveig.app/api/ajaxSearch", data={"q": link, "t": "media", "lang": "en"}, headers=Insta.headers); return re.findall(r'href="(https?://[^"]+)"', response.json().get("data", "")) if response.ok else None; except Exception as e: logging.error(f"SaveIG API error: {e}"); return None; @staticmethod async def send_file(client, event, content_value, caption="Here's your Instagram content"): try: await client.send_file(event.chat_id, content_value, caption=caption); except Exception as e: logging.warning(f"Direct send failed: {e}, attempting local download."); fileoutput = wget.download(content_value); await client.send_file(event.chat_id, fileoutput, caption=caption);
